{"version":3,"sources":["../src/trackmap_ctrl.js"],"names":["log","msg","L","moment","appEvents","MetricsPanelCtrl","panelDefaults","maxDataPoints","autoZoom","scrollWheelZoom","defaultLayer","lineColor","pointColor","TrackMapCtrl","$scope","$injector","_","defaults","panel","layers","OpenStreetMap","tileLayer","attribution","maxZoom","OpenTopoMap","Satellite","forcedOverlay","subdomains","timeSrv","get","coords","leafMap","polyline","hoverMarker","hoverTarget","setSizePromise","events","on","onInitialized","bind","onViewModeChanged","onInitEditMode","onPanelTeardown","onPanelSizeChanged","onDataReceived","onDataSnapshotLoad","onPanelHover","onPanelClear","render","addEditorTab","$timeout","cancel","evt","length","target","Math","floor","pos","x","addTo","min","max","idx","exact","timestamp","setLatLng","position","hasLayer","time_stamp_tool_tip","coordinate_tool_tip","info","document","createElement","className","time","lat","lon","innerHTML","Date","toLocaleString","appendChild","lng","bindTooltip","openTooltip","removeFrom","map","invalidateSize","enabled","disable","enable","hadMap","Boolean","setupMap","eachLayer","layer","addDataToMap","id","zoomSnap","zoomDelta","layerGroup","ToolTipLayers","Timestamp","Coordinates","control","circleMarker","latLng","color","fillColor","fillOpacity","weight","radius","mapBaseLayerChange","mapZoomToBox","e","overlay","options","setZIndex","zIndex","bounds","reduce","t","c","boxZoomBounds","contains","from","to","Infinity","isFinite","setTime","utc","zoomToFit","fitBounds","getBounds","setStyle","data","setView","lats","datapoints","lons","i","push","snapshotData","templateUrl"],"mappings":"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","sourcesContent":["import L from './leaflet/leaflet.js';\nimport moment from 'moment';\n\nimport appEvents from 'app/core/app_events';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nimport './leaflet/leaflet.css!';\nimport './partials/module.css!';\n\nconst panelDefaults = {\n  maxDataPoints: 500,\n  autoZoom: true,\n  scrollWheelZoom: false,\n  defaultLayer: 'OpenStreetMap',\n  lineColor: 'red',\n  pointColor: 'royalblue',\n};\n\nfunction log(msg) {\n  // uncomment for debugging\n  //console.log(msg);\n}\n\nexport class TrackMapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    log('constructor');\n\n    _.defaults(this.panel, panelDefaults);\n\n    // Save layers globally in order to use them in options\n    this.layers = {\n      OpenStreetMap: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        maxZoom: 19,\n      }),\n      OpenTopoMap: L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n        attribution:\n          'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        maxZoom: 17,\n      }),\n      Satellite: L.tileLayer(\n        'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n        {\n          attribution:\n            'Imagery &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n          // This map doesn't have labels so we force a label-only layer on top of it\n          forcedOverlay: L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}.png', {\n            attribution:\n              'Labels by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n            subdomains: 'abcd',\n            maxZoom: 20,\n          }),\n        }\n      ),\n    };\n\n    this.timeSrv = $injector.get('timeSrv');\n    this.coords = [];\n    this.leafMap = null;\n    this.polyline = null;\n    this.hoverMarker = null;\n    this.hoverTarget = null;\n    this.setSizePromise = null;\n\n    // Panel events\n    this.events.on('panel-initialized', this.onInitialized.bind(this));\n    this.events.on('view-mode-changed', this.onViewModeChanged.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-size-changed', this.onPanelSizeChanged.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    // Global events\n    appEvents.on('graph-hover', this.onPanelHover.bind(this));\n    appEvents.on('graph-hover-clear', this.onPanelClear.bind(this));\n  }\n\n  onInitialized() {\n    log('onInitialized');\n    this.render();\n  }\n\n  onInitEditMode() {\n    log('onInitEditMode');\n    this.addEditorTab('Options', 'public/plugins/pr0ps-trackmap-panel/partials/options.html', 2);\n  }\n\n  onPanelTeardown() {\n    log('onPanelTeardown');\n    this.$timeout.cancel(this.setSizePromise);\n  }\n\n  onPanelHover(evt) {\n    log('onPanelHover');\n    if (this.coords.length === 0) {\n      return;\n    }\n\n    // check if we are already showing the correct hoverMarker\n    let target = Math.floor(evt.pos.x);\n    if (this.hoverTarget && this.hoverTarget === target) {\n      return;\n    }\n\n    // check for initial show of the marker\n    if (this.hoverTarget == null) {\n      this.hoverMarker.addTo(this.leafMap);\n    }\n\n    this.hoverTarget = target;\n\n    // Find the currently selected time and move the hoverMarker to it\n    // Note that an exact match isn't always going to work due to rounding so\n    // we clean that up later (still more efficient)\n    let min = 0;\n    let max = this.coords.length - 1;\n    let idx = null;\n    let exact = false;\n    while (min <= max) {\n      idx = Math.floor((max + min) / 2);\n      if (this.coords[idx].timestamp === this.hoverTarget) {\n        exact = true;\n        break;\n      } else if (this.coords[idx].timestamp < this.hoverTarget) {\n        min = idx + 1;\n      } else {\n        max = idx - 1;\n      }\n    }\n\n    // Correct the case where we are +1 index off\n    if (!exact && idx > 0 && this.coords[idx].timestamp > this.hoverTarget) {\n      idx--;\n    }\n    this.hoverMarker.setLatLng(this.coords[idx].position);\n\n    // Add time and location tooltip\n    if (this.leafMap.hasLayer(this.time_stamp_tool_tip) || this.leafMap.hasLayer(this.coordinate_tool_tip)) {\n      let info = document.createElement('ul');\n      info.className = 'tooltip-info';\n\n      let time = document.createElement('li');\n      let lat = document.createElement('li');\n      let lon = document.createElement('li');\n      if (this.leafMap.hasLayer(this.time_stamp_tool_tip)) {\n        time.innerHTML = `Timestamp : ${new Date(this.coords[idx].timestamp).toLocaleString('en-GB')}`;\n        info.appendChild(time);\n      }\n      if (this.leafMap.hasLayer(this.coordinate_tool_tip)) {\n        lat.innerHTML = `Latitude : ${this.coords[idx].position.lat}`;\n        lon.innerHTML = `Longitude : ${this.coords[idx].position.lng}`;\n        info.appendChild(lat);\n        info.appendChild(lon);\n      }\n      this.hoverMarker.bindTooltip(info).openTooltip();\n    }\n  }\n\n  onPanelClear(evt) {\n    log('onPanelClear');\n    // clear the highlighted circle\n    this.hoverTarget = null;\n    if (this.hoverMarker) {\n      this.hoverMarker.removeFrom(this.leafMap);\n    }\n  }\n\n  onViewModeChanged() {\n    log('onViewModeChanged');\n    // KLUDGE: When the view mode is changed, panel resize events are not\n    //         emitted even if the panel was resized. Work around this by telling\n    //         the panel it's been resized whenever the view mode changes.\n    this.onPanelSizeChanged();\n  }\n\n  onPanelSizeChanged() {\n    log('onPanelSizeChanged');\n    // KLUDGE: This event is fired too soon - we need to delay doing the actual\n    //         size invalidation until after the panel has actually been resized.\n    this.$timeout.cancel(this.setSizePromise);\n    let map = this.leafMap;\n    this.setSizePromise = this.$timeout(function() {\n      if (map) {\n        log('Invalidating map size');\n        map.invalidateSize(true);\n      }\n    }, 500);\n  }\n\n  applyScrollZoom() {\n    let enabled = this.leafMap.scrollWheelZoom.enabled();\n    if (enabled != this.panel.scrollWheelZoom) {\n      if (enabled) {\n        this.leafMap.scrollWheelZoom.disable();\n      } else {\n        this.leafMap.scrollWheelZoom.enable();\n      }\n    }\n  }\n\n  applyDefaultLayer() {\n    let hadMap = Boolean(this.leafMap);\n    this.setupMap();\n    // Only need to re-add layers if the map previously existed\n    if (hadMap) {\n      this.leafMap.eachLayer(layer => {\n        layer.removeFrom(this.leafMap);\n      });\n      this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n    }\n    this.addDataToMap();\n  }\n\n  setupMap() {\n    log('setupMap');\n    // Create the map or get it back in a clean state if it already exists\n    if (this.leafMap) {\n      if (this.polyline) {\n        this.polyline.removeFrom(this.leafMap);\n      }\n      this.onPanelClear();\n      return;\n    }\n\n    // Create the map\n    this.leafMap = L.map('trackmap-' + this.panel.id, {\n      scrollWheelZoom: this.panel.scrollWheelZoom,\n      zoomSnap: 0.5,\n      zoomDelta: 1,\n    });\n\n    this.time_stamp_tool_tip = L.layerGroup([]);\n    this.coordinate_tool_tip = L.layerGroup([]);\n    this.ToolTipLayers = { Timestamp: this.time_stamp_tool_tip, Coordinates: this.coordinate_tool_tip };\n    // Add layers to the control widget\n    L.control.layers(this.layers, this.ToolTipLayers).addTo(this.leafMap);\n\n    // Add default layer to map\n    this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n\n    // Hover marker\n    this.hoverMarker = L.circleMarker(L.latLng(0, 0), {\n      color: 'white',\n      fillColor: this.panel.pointColor,\n      fillOpacity: 1,\n      weight: 2,\n      radius: 7,\n    });\n\n    // Events\n    this.leafMap.on('baselayerchange', this.mapBaseLayerChange.bind(this));\n    this.leafMap.on('boxzoomend', this.mapZoomToBox.bind(this));\n  }\n\n  mapBaseLayerChange(e) {\n    // If a tileLayer has a 'forcedOverlay' attribute, always enable/disable it\n    // along with the layer\n    if (this.leafMap.forcedOverlay) {\n      this.leafMap.forcedOverlay.removeFrom(this.leafMap);\n      this.leafMap.forcedOverlay = null;\n    }\n    let overlay = e.layer.options.forcedOverlay;\n    if (overlay) {\n      overlay.addTo(this.leafMap);\n      overlay.setZIndex(e.layer.options.zIndex + 1);\n      this.leafMap.forcedOverlay = overlay;\n    }\n  }\n\n  mapZoomToBox(e) {\n    log('mapZoomToBox');\n    // Find time bounds of selected coordinates\n    const bounds = this.coords.reduce(\n      function(t, c) {\n        if (e.boxZoomBounds.contains(c.position)) {\n          t.from = Math.min(t.from, c.timestamp);\n          t.to = Math.max(t.to, c.timestamp);\n        }\n        return t;\n      },\n      { from: Infinity, to: -Infinity }\n    );\n\n    // Set the global time range\n    if (isFinite(bounds.from) && isFinite(bounds.to)) {\n      // KLUDGE: Create moment objects here to avoid a TypeError that\n      //         occurs when Grafana processes normal numbers\n      this.timeSrv.setTime({\n        from: moment.utc(bounds.from),\n        to: moment.utc(bounds.to),\n      });\n    }\n  }\n\n  // Add the circles and polyline to the map\n  addDataToMap() {\n    log('addDataToMap');\n    this.polyline = L.polyline(this.coords.map(x => x.position, this), {\n      color: this.panel.lineColor,\n      weight: 3,\n    }).addTo(this.leafMap);\n\n    this.zoomToFit();\n  }\n\n  zoomToFit() {\n    log('zoomToFit');\n    if (this.panel.autoZoom && this.polyline) {\n      this.leafMap.fitBounds(this.polyline.getBounds());\n    }\n    this.render();\n  }\n\n  refreshColors() {\n    log('refreshColors');\n    if (this.polyline) {\n      this.polyline.setStyle({\n        color: this.panel.lineColor,\n      });\n    }\n    if (this.hoverMarker) {\n      this.hoverMarker.setStyle({\n        fillColor: this.panel.pointColor,\n      });\n    }\n    this.render();\n  }\n\n  onDataReceived(data) {\n    log('onDataReceived');\n    this.setupMap();\n\n    if (data.length === 0 || data.length !== 2) {\n      // No data or incorrect data, show a world map and abort\n      this.leafMap.setView([0, 0], 1);\n      return;\n    }\n\n    // Asumption is that there are an equal number of properly matched timestamps\n    // TODO: proper joining by timestamp?\n    this.coords.length = 0;\n    const lats = data[0].datapoints;\n    const lons = data[1].datapoints;\n    for (let i = 0; i < lats.length; i++) {\n      if (lats[i][0] == null || lons[i][0] == null || lats[i][1] !== lons[i][1]) {\n        continue;\n      }\n\n      this.coords.push({\n        position: L.latLng(lats[i][0], lons[i][0]),\n        timestamp: lats[i][1],\n      });\n    }\n    this.addDataToMap();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    log('onSnapshotLoad');\n    this.onDataReceived(snapshotData);\n  }\n}\n\nTrackMapCtrl.templateUrl = 'partials/module.html';\n"],"file":"trackmap_ctrl.js"}